{"mappings":"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","sources":["./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/webpack/universalModuleDefinition","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/GlyphRenderer.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/RectangleRenderer.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/RenderModel.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/TypedArray.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/WebglRenderer.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/WebglUtils.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/atlas/CharAtlasCache.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/atlas/CharAtlasUtils.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/atlas/WebglCharAtlas.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/renderLayer/BaseRenderLayer.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/renderLayer/CursorRenderLayer.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/renderLayer/LinkRenderLayer.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/browser/Color.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/browser/Lifecycle.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/browser/renderer/atlas/Constants.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/common/EventEmitter.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/common/Lifecycle.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/common/TypedArrayUtils.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/common/buffer/AttributeData.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/common/buffer/CellData.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/common/buffer/Constants.ts","./node_modules/xterm-addon-webgl/lib/webpack:/src/common/input/TextDecoder.ts","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/webpack/bootstrap","./node_modules/xterm-addon-webgl/lib/webpack:/WebglAddon/src/WebglAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel, IRasterizedGlyph } from './Types';\nimport { COMBINED_CHAR_BIT_MASK, RENDER_MODEL_INDICIES_PER_CELL, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_BG_OFFSET } from './RenderModel';\nimport { fill } from 'common/TypedArrayUtils';\nimport { slice } from './TypedArray';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CODE, Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal, IBufferLine } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  selectionAttributes: Float32Array;\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXCOORD = 4,\n  TEXSIZE = 5\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(u_texture, v_texcoord);\n}`;\n\nconst INDICES_PER_CELL = 10;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\nexport class GlyphRenderer {\n  private _atlas: WebglCharAtlas | undefined;\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _projectionLocation: WebGLUniformLocation;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _textureLocation: WebGLUniformLocation;\n  private _atlasTexture: WebGLTexture;\n  private _attributesBuffer: WebGLBuffer;\n  private _activeBuffer: number = 0;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ],\n    selectionAttributes: new Float32Array(0)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n    const program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this._program = program;\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 8 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup empty texture atlas\n    this._atlasTexture = throwIfFalsy(gl.createTexture());\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.onResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, chars: string): void {\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, chars);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, chars?: string): void {\n    const terminal = this._terminal;\n\n    const i = (y * terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null/space character\n    if (code === NULL_CELL_CODE || code === WHITESPACE_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    let rasterizedGlyph: IRasterizedGlyph;\n    if (!this._atlas) {\n      return;\n    }\n    if (chars && chars.length > 1) {\n      rasterizedGlyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg);\n    } else {\n      rasterizedGlyph = this._atlas.getRasterizedGlyph(code, bg, fg);\n    }\n\n    // Fill empty if no glyph was found\n    if (!rasterizedGlyph) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    // a_origin\n    array[i    ] = -rasterizedGlyph.offset.x + this._dimensions.scaledCharLeft;\n    array[i + 1] = -rasterizedGlyph.offset.y + this._dimensions.scaledCharTop;\n    // a_size\n    array[i + 2] = rasterizedGlyph.size.x / this._dimensions.scaledCanvasWidth;\n    array[i + 3] = rasterizedGlyph.size.y / this._dimensions.scaledCanvasHeight;\n    // a_texcoord\n    array[i + 4] = rasterizedGlyph.texturePositionClipSpace.x;\n    array[i + 5] = rasterizedGlyph.texturePositionClipSpace.y;\n    // a_texsize\n    array[i + 6] = rasterizedGlyph.sizeClipSpace.x;\n    array[i + 7] = rasterizedGlyph.sizeClipSpace.y;\n    // a_cellpos only changes on resize\n  }\n\n  public updateSelection(model: IRenderModel): void {\n    const terminal = this._terminal;\n\n    this._vertices.selectionAttributes = slice(this._vertices.attributes, 0);\n\n    const bg = (this._colors.selectionOpaque.rgba >>> 8) | Attributes.CM_RGB;\n\n    if (model.selection.columnSelectMode) {\n      const startCol = model.selection.startCol;\n      const width = model.selection.endCol - startCol;\n      const height = model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow + 1;\n      for (let y = model.selection.viewportCappedStartRow; y < model.selection.viewportCappedStartRow + height; y++) {\n        this._updateSelectionRange(startCol, startCol + width, y, model, bg);\n      }\n    } else {\n      // Draw first row\n      const startCol = model.selection.viewportStartRow === model.selection.viewportCappedStartRow ? model.selection.startCol : 0;\n      const startRowEndCol = model.selection.viewportCappedStartRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n      this._updateSelectionRange(startCol, startRowEndCol, model.selection.viewportCappedStartRow, model, bg);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow - 1, 0);\n      for (let y = model.selection.viewportCappedStartRow + 1; y <= model.selection.viewportCappedStartRow + middleRowsCount; y++) {\n        this._updateSelectionRange(0, startRowEndCol, y, model, bg);\n      }\n\n      // Draw final row\n      if (model.selection.viewportCappedStartRow !== model.selection.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.selection.viewportEndRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n        this._updateSelectionRange(0, endCol, model.selection.viewportCappedEndRow, model, bg);\n      }\n    }\n  }\n\n  private _updateSelectionRange(startCol: number, endCol: number, y: number, model: IRenderModel, bg: number): void {\n    const terminal = this._terminal;\n    const row = y + terminal.buffer.active.viewportY;\n    let line: IBufferLine | undefined;\n    for (let x = startCol; x < endCol; x++) {\n      const offset = (y * this._terminal.cols + x) * RENDER_MODEL_INDICIES_PER_CELL;\n      const code = model.cells[offset];\n      let fg = model.cells[offset + RENDER_MODEL_FG_OFFSET];\n      if (fg & FgFlags.INVERSE) {\n        const workCell = new AttributeData();\n        workCell.fg = fg;\n        workCell.bg = model.cells[offset + RENDER_MODEL_BG_OFFSET];\n        // Get attributes from fg (excluding inverse) and resolve inverse by pullibng rgb colors\n        // from bg. This is needed since the inverse fg color should be based on the original bg\n        // color, not on the selection color\n        fg = (fg & ~(Attributes.CM_MASK | Attributes.RGB_MASK | FgFlags.INVERSE));\n        switch (workCell.getBgColorMode()) {\n          case Attributes.CM_P16:\n          case Attributes.CM_P256:\n            const c = this._getColorFromAnsiIndex(workCell.getBgColor()).rgba;\n            fg |= (c >> 8) & Attributes.RED_MASK | (c >> 8) & Attributes.GREEN_MASK | (c >> 8) & Attributes.BLUE_MASK;\n          case Attributes.CM_RGB:\n            const arr = AttributeData.toColorRGB(workCell.getBgColor());\n            fg |= arr[0] << Attributes.RED_SHIFT | arr[1] << Attributes.GREEN_SHIFT | arr[2] << Attributes.BLUE_SHIFT;\n          case Attributes.CM_DEFAULT:\n          default:\n            const c2 = this._colors.background.rgba;\n            fg |= (c2 >> 8) & Attributes.RED_MASK | (c2 >> 8) & Attributes.GREEN_MASK | (c2 >> 8) & Attributes.BLUE_MASK;\n        }\n        fg |= Attributes.CM_RGB;\n      }\n      if (code & COMBINED_CHAR_BIT_MASK) {\n        if (!line) {\n          line = terminal.buffer.active.getLine(row);\n        }\n        const chars = line!.getCell(x)!.getChars();\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg, chars);\n      } else {\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg);\n      }\n    }\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._colors.ansi[idx];\n  }\n\n  public onResize(): void {\n    const terminal = this._terminal;\n    const gl = this._gl;\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // Update vertices\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n    if (this._vertices.count !== newCount) {\n      this._vertices.count = newCount;\n      this._vertices.attributes = new Float32Array(newCount);\n      for (let i = 0; i < this._vertices.attributesBuffers.length; i++) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      }\n\n      let i = 0;\n      for (let y = 0; y < terminal.rows; y++) {\n        for (let x = 0; x < terminal.cols; x++) {\n          this._vertices.attributes[i + 8] = x / terminal.cols;\n          this._vertices.attributes[i + 9] = y / terminal.rows;\n          i += INDICES_PER_CELL;\n        }\n      }\n    }\n  }\n\n  public setColors(): void {\n  }\n\n  public render(renderModel: IRenderModel, isSelectionVisible: boolean): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = (isSelectionVisible ? this._vertices.selectionAttributes : this._vertices.attributes).subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the texture atlas if it's changed\n    if (this._atlas.hasCanvasChanged) {\n      this._atlas.hasCanvasChanged = false;\n      gl.uniform1i(this._textureLocation, 0);\n      gl.activeTexture(gl.TEXTURE0 + 0);\n      gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._atlas.cacheCanvas);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    // Set uniforms\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: WebglCharAtlas): void {\n    const gl = this._gl;\n    this._atlas = atlas;\n\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.cacheCanvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = (a_position + (a_unitquad * a_size)) / u_resolution;\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\ninterface IVertices {\n  attributes: Float32Array;\n  selection: Float32Array;\n  count: number;\n}\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\nexport class RectangleRenderer {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n  private _selectionFloat!: Float32Array;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY),\n    selection: new Float32Array(3 * INDICES_PER_RECTANGLE)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n\n    // Uniform locations\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors();\n  }\n\n  public render(): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this._vertices.count);\n\n    // Bind selection buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.selection, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, 3);\n  }\n\n  public onResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setColors(): void {\n    this._updateCachedColors();\n    this._updateViewportRectangle();\n  }\n\n  private _updateCachedColors(): void {\n    this._bgFloat = this._colorToFloat32Array(this._colors.background);\n    this._selectionFloat = this._colorToFloat32Array(this._colors.selectionOpaque);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.scaledCellWidth,\n      this._terminal.rows * this._dimensions.scaledCellHeight,\n      this._bgFloat\n    );\n  }\n\n  public updateSelection(model: ISelectionRenderModel): void {\n    const terminal = this._terminal;\n\n    if (!model.hasSelection) {\n      fill(this._vertices.selection, 0, 0);\n      return;\n    }\n\n    if (model.columnSelectMode) {\n      const startCol = model.startCol;\n      const width = model.endCol - startCol;\n      const height = model.viewportCappedEndRow - model.viewportCappedStartRow + 1;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        width * this._dimensions.scaledCellWidth,\n        height * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n      fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE);\n    } else {\n      // Draw first row\n      const startCol = model.viewportStartRow === model.viewportCappedStartRow ? model.startCol : 0;\n      const startRowEndCol = model.viewportCappedStartRow === model.viewportEndRow ? model.endCol : terminal.cols;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        (startRowEndCol - startCol) * this._dimensions.scaledCellWidth,\n        this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.viewportCappedEndRow - model.viewportCappedStartRow - 1, 0);\n      this._addRectangleFloat(\n        this._vertices.selection,\n        INDICES_PER_RECTANGLE,\n        0,\n        (model.viewportCappedStartRow + 1) * this._dimensions.scaledCellHeight,\n        terminal.cols * this._dimensions.scaledCellWidth,\n        middleRowsCount * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw final row\n      if (model.viewportCappedStartRow !== model.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.viewportEndRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n        this._addRectangleFloat(\n          this._vertices.selection,\n          INDICES_PER_RECTANGLE * 2,\n          0,\n          model.viewportCappedEndRow * this._dimensions.scaledCellHeight,\n          endCol * this._dimensions.scaledCellWidth,\n          this._dimensions.scaledCellHeight,\n          this._selectionFloat\n        );\n      } else {\n        fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE * 2);\n      }\n    }\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    let rectangleCount = 1;\n\n    for (let y = 0; y < terminal.rows; y++) {\n      let currentStartX = -1;\n      let currentBg = 0;\n      let currentFg = 0;\n      let currentInverse = false;\n      for (let x = 0; x < terminal.cols; x++) {\n        const modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        const bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        const fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        const inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: IVertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    let rgba: number | undefined;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.background.rgba;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    const x1 = startX * this._dimensions.scaledCellWidth;\n    const y1 = y * this._dimensions.scaledCellHeight;\n    const r = ((rgba >> 24) & 0xFF) / 255;\n    const g = ((rgba >> 16) & 0xFF) / 255;\n    const b = ((rgba >> 8 ) & 0xFF) / 255;\n\n    this._addRectangle(vertices.attributes, offset, x1, y1, (endX - startX) * this._dimensions.scaledCellWidth, this._dimensions.scaledCellHeight, r, g, b, 1);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderModel, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 3;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = {\n      hasSelection: false,\n      columnSelectMode: false,\n      viewportStartRow: 0,\n      viewportEndRow: 0,\n      viewportCappedStartRow: 0,\n      viewportCappedEndRow: 0,\n      startCol: 0,\n      endCol: 0\n    };\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    fill(this.cells, 0, 0);\n    fill(this.lineLengths, 0, 0);\n  }\n\n  public clearSelection(): void {\n    this.selection.hasSelection = false;\n    this.selection.viewportStartRow = 0;\n    this.selection.viewportEndRow = 0;\n    this.selection.viewportCappedStartRow = 0;\n    this.selection.viewportCappedEndRow = 0;\n    this.selection.startCol = 0;\n    this.selection.endCol = 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\nexport function slice<T extends TypedArray>(array: T, start?: number, end?: number): T {\n  // all modern engines that support .slice\n  if (array.slice) {\n    return array.slice(start, end) as T;\n  }\n  return sliceFallback(array, start, end);\n}\n\nexport function sliceFallback<T extends TypedArray>(array: T, start: number = 0, end: number = array.length): T {\n  if (start < 0) {\n    start = (array.length + start) % array.length;\n  }\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  start = Math.min(start, end);\n\n  const result: T = new (array.constructor as any)(end - start);\n  for (let i = 0; i < end - start; ++i) {\n    result[i] = array[i + start];\n  }\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { CursorRenderLayer } from './renderLayer/CursorRenderLayer';\nimport { acquireCharAtlas } from './atlas/CharAtlasCache';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { IWebGL2RenderingContext } from './Types';\nimport { RenderModel, COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable } from 'common/Lifecycle';\nimport { Content, NULL_CELL_CHAR, NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal, IEvent } from 'xterm';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { ITerminal, IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { CellData } from 'common/buffer/CellData';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ICharacterJoinerService } from 'browser/services/Services';\nimport { CharData, ICellData } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _charAtlas: WebglCharAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer: RectangleRenderer;\n  private _glyphRenderer: GlyphRenderer;\n\n  public dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  private _onContextLoss = new EventEmitter<void>();\n  public get onContextLoss(): IEvent<void> { return this._onContextLoss.event; }\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private readonly _characterJoinerService: ICharacterJoinerService,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this._core = (this._terminal as any)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement!, 2, this._colors, this._core),\n      new CursorRenderLayer(this._core.screenElement!, 3, this._colors, this._onRequestRedraw)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n      throw new Error('WebGL2 not supported ' + this._gl);\n    }\n\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextlost', (e) => { this._onContextLoss.fire(e); }));\n\n    this._core.screenElement!.appendChild(this._canvas);\n\n    this._rectangleRenderer = new RectangleRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n    this._glyphRenderer = new GlyphRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n\n    // Update dimensions and acquire char atlas\n    this.onCharSizeChanged();\n\n    this._isAttached = document.body.contains(this._core.screenElement!);\n  }\n\n  public dispose(): void {\n    for (const l of this._renderLayers) {\n      l.dispose();\n    }\n    this._core.screenElement!.removeChild(this._canvas);\n    super.dispose();\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.cacheCanvas;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    for (const l of this._renderLayers) {\n      l.setColors(this._terminal, this._colors);\n      l.reset(this._terminal);\n    }\n\n    this._rectangleRenderer.setColors();\n    this._glyphRenderer.setColors();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this._terminal, this.dimensions);\n    }\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.scaledCanvasWidth;\n    this._canvas.height = this.dimensions.scaledCanvasHeight;\n    this._canvas.style.width = `${this.dimensions.canvasWidth}px`;\n    this._canvas.style.height = `${this.dimensions.canvasHeight}px`;\n\n    // Resize the screen\n    this._core.screenElement!.style.width = `${this.dimensions.canvasWidth}px`;\n    this._core.screenElement!.style.height = `${this.dimensions.canvasHeight}px`;\n\n    this._rectangleRenderer.onResize();\n    if (this._model.selection.hasSelection) {\n      // Update selection as dimensions have changed\n      this._rectangleRenderer.updateSelection(this._model.selection);\n    }\n\n    this._glyphRenderer.setDimensions(this.dimensions);\n    this._glyphRenderer.onResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public onBlur(): void {\n    for (const l of this._renderLayers) {\n      l.onBlur(this._terminal);\n    }\n  }\n\n  public onFocus(): void {\n    for (const l of this._renderLayers) {\n      l.onFocus(this._terminal);\n    }\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    for (const l of this._renderLayers) {\n      l.onSelectionChanged(this._terminal, start, end, columnSelectMode);\n    }\n\n    this._updateSelectionModel(start, end, columnSelectMode);\n\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public onCursorMove(): void {\n    for (const l of this._renderLayers) {\n      l.onCursorMove(this._terminal);\n    }\n  }\n\n  public onOptionsChanged(): void {\n    for (const l of this._renderLayers) {\n      l.onOptionsChanged(this._terminal);\n    }\n    this._updateDimensions();\n    this._refreshCharAtlas();\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.scaledCharWidth <= 0 && this.dimensions.scaledCharHeight <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireCharAtlas(this._terminal, this._colors, this.dimensions.scaledCharWidth, this.dimensions.scaledCharHeight);\n    if (!('getRasterizedGlyph' in atlas)) {\n      throw new Error('The webgl renderer only works with the webgl char atlas');\n    }\n    this._charAtlas = atlas as WebglCharAtlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.setAtlas(this._charAtlas);\n  }\n\n  public clearCharAtlas(): void {\n    this._charAtlas?.clearTexture();\n    this._model.clear();\n    this._updateModel(0, this._terminal.rows - 1);\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public clear(): void {\n    for (const l of this._renderLayers) {\n      l.reset(this._terminal);\n    }\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (document.body.contains(this._core.screenElement!) && (this._core as any)._charSizeService.width && (this._core as any)._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    for (const l of this._renderLayers) {\n      l.onGridChanged(this._terminal, start, end);\n    }\n\n    // Tell renderer the frame is beginning\n    if (this._glyphRenderer.beginFrame()) {\n      this._model.clear();\n      this._updateSelectionModel(undefined, undefined);\n    }\n\n    // Update model to reflect what's drawn\n    this._updateModel(start, end);\n\n    // Render\n    this._rectangleRenderer.render();\n    this._glyphRenderer.render(this._model, this._model.selection.hasSelection);\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n    let cell: ICellData = this._workCell;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + terminal.buffer.ydisp;\n      const line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (let x = 0; x < terminal.cols; x++) {\n        line.loadCell(x, cell);\n\n        // If true, indicates that the current character(s) to draw were joined.\n        let isJoined = false;\n        let lastCharX = x;\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          const range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly\n          cell = new JoinedCellData(\n            cell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        const chars = cell.getChars();\n        let code = cell.getCode();\n        const i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === cell.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === cell.fg) {\n          continue;\n        }\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code = code | COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = cell.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = cell.fg;\n\n        this._glyphRenderer.updateCell(x, y, code, cell.bg, cell.fg, chars);\n\n        if (isJoined) {\n          // Restore work cell\n          cell = this._workCell;\n\n          // Null out non-first cells\n          for (x++; x < lastCharX; x++) {\n            const j = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n            this._glyphRenderer.updateCell(x, y, NULL_CELL_CODE, 0, 0, NULL_CELL_CHAR);\n            this._model.cells[j] = NULL_CELL_CODE;\n            this._model.cells[j + RENDER_MODEL_BG_OFFSET] = this._workCell.bg;\n            this._model.cells[j + RENDER_MODEL_FG_OFFSET] = this._workCell.fg;\n          }\n        }\n      }\n    }\n    this._rectangleRenderer.updateBackgrounds(this._model);\n    if (this._model.selection.hasSelection) {\n      // Model could be updated but the selection is unchanged\n      this._glyphRenderer.updateSelection(this._model);\n    }\n  }\n\n  private _updateSelectionModel(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    const terminal = this._terminal;\n\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this._model.clearSelection();\n      this._rectangleRenderer.updateSelection(this._model.selection);\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.active.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.active.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this._model.clearSelection();\n      this._rectangleRenderer.updateSelection(this._model.selection);\n      return;\n    }\n\n    this._model.selection.hasSelection = true;\n    this._model.selection.columnSelectMode = columnSelectMode;\n    this._model.selection.viewportStartRow = viewportStartRow;\n    this._model.selection.viewportEndRow = viewportEndRow;\n    this._model.selection.viewportCappedStartRow = viewportCappedStartRow;\n    this._model.selection.viewportCappedEndRow = viewportCappedEndRow;\n    this._model.selection.startCol = start[0];\n    this._model.selection.endCol = end[0];\n\n    this._rectangleRenderer.updateSelection(this._model.selection);\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // TODO: Acquire CharSizeService properly\n\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!(this._core as any)._charSizeService.width || !(this._core as any)._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n\n    // NOTE: ceil fixes sometime, floor does others :s\n\n    this.dimensions.scaledCharWidth = Math.floor((this._core as any)._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil((this._core as any)._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.getOption('lineHeight'));\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._terminal.getOption('lineHeight') === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.getOption('letterSpacing'));\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.getOption('letterSpacing') / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / this._devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / this._devicePixelRatio);\n\n    // this.dimensions.scaledCanvasHeight = this.dimensions.canvasHeight * devicePixelRatio;\n    // this.dimensions.scaledCanvasWidth = this.dimensions.canvasWidth * devicePixelRatio;\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\n    // measured in CSS pixels, but the actual char size on the canvas can\n    // differ.\n    // this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n    // this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n\n    // This fixes 110% and 125%, not 150% or 175% though\n    this.dimensions.actualCellHeight = this.dimensions.scaledCellHeight / this._devicePixelRatio;\n    this.dimensions.actualCellWidth = this.dimensions.scaledCellWidth / this._devicePixelRatio;\n  }\n}\n\n// TODO: Share impl with core\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { WebglCharAtlas } from './WebglCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\n\ninterface ICharAtlasCacheEntry {\n  atlas: WebglCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(\n  terminal: Terminal,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): WebglCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new WebglCharAtlas(document, newConfig),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { Terminal, FontWeight } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\n\nconst NULL_COLOR: IColor = {\n  css: '',\n  rgba: 0\n};\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, terminal: Terminal, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selectionTransparent: NULL_COLOR,\n    selectionOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache\n  };\n  return {\n    devicePixelRatio: window.devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.getOption('fontFamily'),\n    fontSize: terminal.getOption('fontSize'),\n    fontWeight: terminal.getOption('fontWeight') as FontWeight,\n    fontWeightBold: terminal.getOption('fontWeightBold') as FontWeight,\n    allowTransparency: terminal.getOption('allowTransparency'),\n    drawBoldTextInBrightColors: terminal.getOption('drawBoldTextInBrightColors'),\n    minimumContrastRatio: terminal.getOption('minimumContrastRatio'),\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DIM_OPACITY } from 'browser/renderer/atlas/Constants';\nimport { IRasterizedGlyph, IBoundingBox, IRasterizedGlyphSet } from '../Types';\nimport { DEFAULT_COLOR, Attributes } from 'common/buffer/Constants';\nimport { throwIfFalsy } from '../WebglUtils';\nimport { IColor } from 'browser/Types';\nimport { IDisposable } from 'xterm';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { channels, rgba } from 'browser/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\n/**\n * The amount of the texture to be filled before throwing it away and starting\n * again. Since the throw away and individual glyph draws don't cost too much,\n * this prevent juggling multiple textures in the GL context.\n */\nconst TEXTURE_CAPACITY = Math.floor(TEXTURE_HEIGHT * 0.8);\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  offset: { x: 0, y: 0 },\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nexport class WebglCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: { [code: number]: IRasterizedGlyphSet } = {};\n  private _cacheMapCombined: { [chars: string]: IRasterizedGlyphSet } = {};\n\n  // The texture that the atlas is drawn to\n  public cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // Since glyphs are expected to be around the same height, the packing\n  // strategy used it to fill a row with glyphs while keeping track of the\n  // tallest glyph in the row. Once the row is full a new row is started at\n  // (0,lastRow+lastRowTallestGlyph).\n  private _currentRowY: number = 0;\n  private _currentRowX: number = 0;\n  private _currentRowHeight: number = 0;\n\n  public hasCanvasChanged = false;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  constructor(\n    document: Document,\n    private _config: ICharAtlasConfig\n  ) {\n    this.cacheCanvas = document.createElement('canvas');\n    this.cacheCanvas.width = TEXTURE_WIDTH;\n    this.cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this.cacheCanvas.getContext('2d', { alpha: true }));\n\n    this._tmpCanvas = document.createElement('canvas');\n    this._tmpCanvas.width = this._config.scaledCharWidth * 4 + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCanvas.height = this._config.scaledCharHeight + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', { alpha: this._config.allowTransparency }));\n  }\n\n  public dispose(): void {\n    if (this.cacheCanvas.parentElement) {\n      this.cacheCanvas.parentElement.removeChild(this.cacheCanvas);\n    }\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  private _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126\n    for (let i = 33; i < 126; i++) {\n      const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR);\n      this._cacheMap[i] = {\n        [DEFAULT_COLOR]: {\n          [DEFAULT_COLOR]: rasterizedGlyph\n        }\n      };\n    }\n  }\n\n  public beginFrame(): boolean {\n    if (this._currentRowY > TEXTURE_CAPACITY) {\n      this.clearTexture();\n      this.warmUp();\n      return true;\n    }\n    return false;\n  }\n\n  public clearTexture(): void {\n    if (this._currentRowX === 0 && this._currentRowY === 0) {\n      return;\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._cacheMap = {};\n    this._cacheMapCombined = {};\n    this._currentRowHeight = 0;\n    this._currentRowX = 0;\n    this._currentRowY = 0;\n    this._didWarmUp = false;\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMapCombined[chars];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMapCombined[chars] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(chars, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  public getRasterizedGlyph(code: number, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMap[code];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMap[code] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(code, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor);\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        return {\n          rgba: bgColor << 8,\n          css: `#${toPaddedHex(arr[0])}${toPaddedHex(arr[1])}${toPaddedHex(arr[2])}`\n        };\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground;\n        }\n        return this._config.colors.background;\n    }\n  }\n\n  private _getForegroundCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string {\n    const minimumContrastCss = this._getMinimumContrastCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n    if (minimumContrastCss) {\n      return minimumContrastCss;\n    }\n\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).css;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        return channels.toCss(arr[0], arr[1], arr[2]);\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          const bg = this._config.colors.background.css;\n          if (bg.length === 9) {\n            // Remove bg alpha channel if present\n            return bg.substr(0, 7);\n          }\n          return bg;\n        }\n        return this._config.colors.foreground.css;\n    }\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string | undefined {\n    if (this._config.minimumContrastRatio === 1) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._config.colors.contrastCache.getCss(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio);\n\n    if (!result) {\n      this._config.colors.contrastCache.setCss(bg, fg, null);\n      return undefined;\n    }\n\n    const css = channels.toCss(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    this._config.colors.contrastCache.setCss(bg, fg, css);\n\n    return css;\n  }\n\n  private _drawToCache(code: number, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(chars: string, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    this.hasCanvasChanged = true;\n\n    // Allow 1 cell width per character, with a minimum of 2 (CJK), plus some padding. This is used\n    // to draw the glyph to the canvas as well as to restrict the bounding box search to ensure\n    // giant ligatures (eg. =====>) don't impact overall performance.\n    const allowedWidth = this._config.scaledCharWidth * Math.max(chars.length, 2) + TMP_CANVAS_GLYPH_PADDING * 2;\n    if (this._tmpCanvas.width < allowedWidth) {\n      this._tmpCanvas.width = allowedWidth;\n    }\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = 'ideographic';\n\n    this._tmpCtx.fillStyle = this._getForegroundCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n\n    // Apply alpha to dim the character\n    if (dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Check if the char is a powerline glyph, these will be restricted to a single cell glyph, no\n    // padding on either side that are allowed for other glyphs since they are designed to be pixel\n    // perfect but may render with \"bad\" anti-aliasing\n    let isPowerlineGlyph = false;\n    if (chars.length === 1) {\n      const code = chars.charCodeAt(0);\n      if (code >= 0xE0A0 && code <= 0xE0D6) {\n        isPowerlineGlyph = true;\n      }\n    }\n\n    // For powerline glyphs left/top padding is excluded (https://github.com/microsoft/vscode/issues/120129)\n    const padding = isPowerlineGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING;\n\n    // Draw the character\n    this._tmpCtx.fillText(chars, padding, padding + this._config.scaledCharHeight);\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // TODO: Support transparency\n    // let isEmpty = false;\n    // if (!this._config.allowTransparency) {\n    //   isEmpty = clearColor(imageData, backgroundColor);\n    // }\n\n    // Clear out the background color and determine if the glyph is empty.\n    const isEmpty = clearColor(imageData, backgroundColor);\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox, allowedWidth, isPowerlineGlyph);\n    const clippedImageData = this._clipImageData(imageData, this._workBoundingBox);\n\n    // Check if there is enough room in the current row and go to next if needed\n    if (this._currentRowX + this._config.scaledCharWidth > TEXTURE_WIDTH) {\n      this._currentRowX = 0;\n      this._currentRowY += this._currentRowHeight;\n      this._currentRowHeight = 0;\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePosition.x = this._currentRowX;\n    rasterizedGlyph.texturePosition.y = this._currentRowY;\n    rasterizedGlyph.texturePositionClipSpace.x = this._currentRowX / TEXTURE_WIDTH;\n    rasterizedGlyph.texturePositionClipSpace.y = this._currentRowY / TEXTURE_HEIGHT;\n\n    // Update atlas current row\n    this._currentRowHeight = Math.max(this._currentRowHeight, rasterizedGlyph.size.y);\n    this._currentRowX += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(clippedImageData, rasterizedGlyph.texturePosition.x, rasterizedGlyph.texturePosition.y);\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox, allowedWidth: number, restrictedGlyph: boolean): IRasterizedGlyph {\n    boundingBox.top = 0;\n    const height = restrictedGlyph ? this._config.scaledCharHeight : this._tmpCanvas.height;\n    const width = restrictedGlyph ? this._config.scaledCharWidth : allowedWidth;\n    let found = false;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = width;\n    found = false;\n    for (let x = width - 1; x >= 0; x--) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = height;\n    found = false;\n    for (let y = height - 1; y >= 0; y--) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1) / TEXTURE_WIDTH,\n        y: (boundingBox.bottom - boundingBox.top + 1) / TEXTURE_HEIGHT\n      },\n      offset: {\n        x: -boundingBox.left + (restrictedGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING),\n        y: -boundingBox.top + (restrictedGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING)\n      }\n    };\n  }\n\n  private _clipImageData(imageData: ImageData, boundingBox: IBoundingBox): ImageData {\n    const width = boundingBox.right - boundingBox.left + 1;\n    const height = boundingBox.bottom - boundingBox.top + 1;\n    const clippedData = new Uint8ClampedArray(width * height * 4);\n    for (let y = boundingBox.top; y <= boundingBox.bottom; y++) {\n      for (let x = boundingBox.left; x <= boundingBox.right; x++) {\n        const oldOffset = y * this._tmpCanvas.width * 4 + x * 4;\n        const newOffset = (y - boundingBox.top) * width * 4 + (x - boundingBox.left) * 4;\n        clippedData[newOffset] = imageData.data[oldOffset];\n        clippedData[newOffset + 1] = imageData.data[oldOffset + 1];\n        clippedData[newOffset + 2] = imageData.data[oldOffset + 2];\n        clippedData[newOffset + 3] = imageData.data[oldOffset + 3];\n      }\n    }\n    return new ImageData(clippedData, width, height);\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n\nfunction toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireCharAtlas } from '../atlas/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WebglCharAtlas } from 'atlas/WebglCharAtlas';\nimport { throwIfFalsy } from '../WebglUtils';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: WebglCharAtlas | undefined;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    this._container.removeChild(this._canvas);\n    if (this._charAtlas) {\n      this._charAtlas.dispose();\n    }\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {}\n  public onBlur(terminal: Terminal): void {}\n  public onFocus(terminal: Terminal): void {}\n  public onCursorMove(terminal: Terminal): void {}\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  public setColors(terminal: Terminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      window.devicePixelRatio * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + window.devicePixelRatio / 2,\n      y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n      width * this._scaledCellWidth - window.devicePixelRatio,\n      (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = 'ideographic';\n    this._clipRow(terminal, y);\n    this._ctx.fillText(\n      cell.getChars(),\n      x * this._scaledCellWidth + this._scaledCharLeft,\n      y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param terminal The terminal.\n   * @param y The row to clip.\n   */\n  private _clipRow(terminal: Terminal, y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      terminal.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.getOption('fontWeightBold') : terminal.getOption('fontWeight');\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.getOption('fontSize') * window.devicePixelRatio}px ${terminal.getOption('fontFamily')}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { IEventEmitter } from 'common/EventEmitter';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: Terminal, x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    private _onRequestRefreshRowsEvent: IEventEmitter<IRequestRedrawEvent>\n  ) {\n    super(container, 'cursor', zIndex, true, colors);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    // TODO: Consider initial options? Maybe onOptionsChanged should be called at the end of open?\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCursor();\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this.onOptionsChanged(terminal);\n    }\n  }\n\n  public onBlur(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.pause();\n    }\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onFocus(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.resume(terminal);\n    } else {\n      this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {\n    if (terminal.getOption('cursorBlink')) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\n          this._render(terminal, true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onCursorMove(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: Terminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    // TODO: Need to expose API for this\n    if (!(terminal as any)._core._coreService.isCursorInitialized || (terminal as any)._core._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.active.baseY + terminal.buffer.active.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.active.viewportY;\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(terminal.buffer.active.cursorX, terminal.cols - 1);\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // TODO: Need fast buffer API for loading cell\n    (terminal as any)._core.buffer.lines.get(cursorY).loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!isTerminalFocused(terminal)) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = terminal.getOption('cursorStyle');\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](terminal, cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(terminal, cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === isTerminalFocused(terminal) &&\n          this._state.style === terminal.getOption('cursorStyle') &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.getOption('cursorStyle') || 'block'](terminal, cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.getOption('cursorStyle');\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, terminal.getOption('cursorWidth'));\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(terminal, cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    terminal: Terminal,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isTerminalFocused(terminal)) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: Terminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(terminal: Terminal): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n\nfunction isTerminalFocused(terminal: Terminal): boolean {\n  return document.activeElement === terminal.textarea && document.hasFocus();\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from '../atlas/CharAtlasUtils';\nimport { ITerminal, IColorSet, ILinkifierEvent } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ITerminal) {\n    super(container, 'link', zIndex, true, colors);\n    terminal.linkifier.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n\n    terminal.linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor } from 'browser/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    switch (css.length) {\n      case 7: // #rrggbb\n        return {\n          css,\n          rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n        };\n      case 9: // #rrggbbaa\n        return {\n          css,\n          rgba: parseInt(css.slice(1), 16) >>> 0\n        };\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        return reduceLuminance(bgRgba, fgRgba, ratio);\n      }\n      return increaseLuminance(bgRgba, fgRgba, ratio);\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number): IColor {\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param type The event type.\n * @param handler The handler for the listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number   { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number      { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number     { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number    { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number       { return this.bg & BgFlags.DIM; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  constructor(\n    // underline style, NONE is empty\n    public underlineStyle: UnderlineStyle = UnderlineStyle.NONE,\n    // underline color, -1 is empty (same as FG)\n    public underlineColor: number = -1\n  ) {}\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this.underlineStyle, this.underlineColor);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..31 (32th bit unused)\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon, IEvent } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\nimport { ICharacterJoinerService, IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\n\nexport class WebglAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n  private _onContextLoss = new EventEmitter<void>();\n  public get onContextLoss(): IEvent<void> { return this._onContextLoss.event; }\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {}\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate WebglAddon before Terminal.open');\n    }\n    this._terminal = terminal;\n    const renderService: IRenderService = (<any>terminal)._core._renderService;\n    const characterJoinerService: ICharacterJoinerService = (<any>terminal)._core._characterJoinerService;\n    const colors: IColorSet = (<any>terminal)._core._colorManager.colors;\n    this._renderer = new WebglRenderer(terminal, colors, characterJoinerService, this._preserveDrawingBuffer);\n    this._renderer.onContextLoss(() => this._onContextLoss.fire());\n    renderService.setRenderer(this._renderer);\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose WebglAddon because it is activated');\n    }\n    const renderService: IRenderService = (this._terminal as any)._core._renderService;\n    renderService.setRenderer((this._terminal as any)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n    this._renderer = undefined;\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearCharAtlas();\n  }\n}\n"],"names":["root","factory","self","r","i","o","n","s","a","l","INDICES_PER_CELL","BYTES_PER_CELL","Float32Array","BYTES_PER_ELEMENT","_","t","_terminal","_colors","_gl","_dimensions","this","_activeBuffer","_vertices","count","attributes","attributesBuffers","selectionAttributes","gl","program","throwIfFalsy","createProgram","_program","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","unitQuadVertices","unitQuadVerticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","unitQuadElementIndices","Uint8Array","elementIndicesBuffer","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","_atlasTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","onResize","prototype","beginFrame","_atlas","updateCell","x","y","code","bg","fg","chars","_updateCell","array","rasterizedGlyph","cols","NULL_CELL_CODE","WHITESPACE_CELL_CODE","length","getRasterizedGlyphCombinedChar","getRasterizedGlyph","offset","scaledCharLeft","scaledCharTop","size","scaledCanvasWidth","scaledCanvasHeight","texturePositionClipSpace","sizeClipSpace","fill","updateSelection","model","terminal","slice","selectionOpaque","rgba","selection","columnSelectMode","startCol","width","endCol","height","viewportCappedEndRow","viewportCappedStartRow","_updateSelectionRange","viewportStartRow","startRowEndCol","middleRowsCount","Math","max","viewportEndRow","line","row","buffer","active","viewportY","RENDER_MODEL_INDICIES_PER_CELL","cells","RENDER_MODEL_FG_OFFSET","workCell","AttributeData","RENDER_MODEL_BG_OFFSET","getBgColorMode","c","_getColorFromAnsiIndex","getBgColor","arr","toColorRGB","c2","background","COMBINED_CHAR_BIT_MASK","getLine","getCell","getChars","idx","ansi","Error","viewport","canvas","newCount","rows","setColors","render","renderModel","isSelectionVisible","useProgram","activeBuffer","bufferLength","lineLengths","si","sub","subarray","set","STREAM_DRAW","hasCanvasChanged","uniform1i","activeTexture","TEXTURE0","cacheCanvas","generateMipmap","uniformMatrix4fv","PROJECTION_MATRIX","uniform2f","drawElementsInstanced","TRIANGLES","setAtlas","atlas","setDimensions","dimensions","e","GlyphRenderer","BYTES_PER_RECTANGLE","_updateCachedColors","DYNAMIC_DRAW","_updateViewportRectangle","_bgFloat","_colorToFloat32Array","_selectionFloat","_addRectangleFloat","scaledCellWidth","scaledCellHeight","hasSelection","INDICES_PER_RECTANGLE","updateBackgrounds","vertices","rectangleCount","currentStartX","currentBg","currentFg","currentInverse","modelIndex","inverse","_updateRectangle","startX","endX","foreground","expandFloat32Array","x1","y1","g","b","_addRectangle","color","RectangleRenderer","Uint32Array","resize","indexCount","clear","clearSelection","RenderModel","sliceFallback","start","end","min","result","constructor","h","d","u","f","p","v","_characterJoinerService","preserveDrawingBuffer","call","_model","_workCell","CellData","_onRequestRedraw","EventEmitter","_onContextLoss","_core","_renderLayers","LinkRenderLayer","screenElement","CursorRenderLayer","scaledCharWidth","scaledCharHeight","canvasWidth","canvasHeight","actualCellWidth","actualCellHeight","_devicePixelRatio","window","devicePixelRatio","_updateDimensions","_canvas","document","createElement","contextAttributes","antialias","depth","getContext","register","addDisposableDomListener","fire","appendChild","_rectangleRenderer","_glyphRenderer","onCharSizeChanged","_isAttached","body","contains","Object","defineProperty","event","dispose","removeChild","_charAtlas","colors","reset","_refreshCharAtlas","onDevicePixelRatioChange","style","onBlur","onFocus","onSelectionChanged","_updateSelectionModel","onCursorMove","onOptionsChanged","acquireCharAtlas","warmUp","clearCharAtlas","clearTexture","_updateModel","registerCharacterJoiner","handler","deregisterCharacterJoiner","joinerId","renderRows","_charSizeService","onGridChanged","undefined","cell","ydisp","lines","get","joinedRanges","getJoinedCharacters","loadCell","isJoined","lastCharX","range","shift","JoinedCellData","translateToString","getCode","j","NULL_CELL_CHAR","floor","ceil","getOption","round","Disposable","WebglRenderer","C","firstCell","content","combinedData","_width","isCombined","getWidth","setFromCharData","value","getAsCharData","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","vertexSource","fragmentSource","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","newLength","newArray","charAtlasCache","newConfig","generateConfig","ownedByIndex","entry","ownedBy","indexOf","configEquals","config","splice","push","newEntry","WebglCharAtlas","removeTerminalFromCache","index","NULL_COLOR","css","clonedColors","cursor","cursorAccent","selectionTransparent","contrastCache","fontFamily","fontSize","fontWeight","fontWeightBold","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","is256Color","colorCode","TEXTURE_WIDTH","TEXTURE_HEIGHT","TEXTURE_CAPACITY","TRANSPARENT_COLOR","NULL_RASTERIZED_GLYPH","texturePosition","_config","_didWarmUp","_cacheMap","_cacheMapCombined","_currentRowY","_currentRowX","_currentRowHeight","_workBoundingBox","top","left","bottom","right","_workAttributeData","_cacheCtx","alpha","_tmpCanvas","TMP_CANVAS_GLYPH_PADDING","_tmpCtx","parentElement","_doWarmUp","_drawToCache","DEFAULT_COLOR","clearRect","rasterizedGlyphSet","rasterizedGlyphSetBg","_getBackgroundColor","bgColorMode","bgColor","toPaddedHex","_getForegroundCss","fgColorMode","fgColor","bold","minimumContrastCss","_getMinimumContrastCss","channels","toCss","substr","_resolveBackgroundRgba","_resolveForegroundRgba","adjustedColor","getCss","bgRgba","fgRgba","ensureContrastRatio","setCss","codeOrChars","String","fromCharCode","allowedWidth","save","isInvisible","isBold","isInverse","dim","isDim","italic","isItalic","getFgColor","getFgColorMode","temp","temp2","backgroundColor","globalCompositeOperation","fillStyle","fillRect","fontStyle","font","textBaseline","globalAlpha","DIM_OPACITY","isPowerlineGlyph","charCodeAt","padding","fillText","restore","imageData","getImageData","isEmpty","data","_findGlyphBoundingBox","clippedImageData","_clipImageData","putImageData","boundingBox","restrictedGlyph","found","alphaOffset","clippedData","Uint8ClampedArray","oldOffset","newOffset","ImageData","toString","_container","id","zIndex","_alpha","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","classList","add","_initCanvas","_ctx","_clearAll","startRow","endRow","colorSet","_setTransparency","oldCanvas","cloneNode","replaceChild","_fillCells","_fillBottomLineAtCells","_fillLeftLineAtCell","_strokeRectAtCell","lineWidth","strokeRect","_clearCells","_fillCharTrueColor","_getFont","_clipRow","beginPath","rect","clip","BaseRenderLayer","BLINK_INTERVAL","container","_onRequestRefreshRowsEvent","_cell","_state","isFocused","_cursorRenderers","bar","_renderBarCursor","bind","block","_renderBlockCursor","underline","_renderUnderlineCursor","_clearCursor","_cursorBlinkStateManager","pause","cursorY","resume","CursorBlinkStateManager","_render","restartBlinkAnimation","isPaused","triggeredByAnimationFrame","_coreService","isCursorInitialized","isCursorHidden","baseY","viewportRelativeCursorY","cursorX","isTerminalFocused","cursorStyle","_renderBlurCursor","isCursorVisible","strokeStyle","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","clearTimeout","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","setTimeout","time","setInterval","activeElement","textarea","hasFocus","linkifier","onShowLinkUnderline","_onShowLinkUnderline","onHideLinkUnderline","_onHideLinkUnderline","linkifier2","_clearCurrentLink","middleRowCount","y2","x2","INVERTED_DEFAULT_COLOR","rgb","contrastRatio","l1","l2","toRgba","blend","fgR","fgG","fgB","bgR","bgG","bgB","isOpaque","ratio","toColor","opaque","rgbaColor","toChannels","opacity","parseInt","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","node","options","addEventListener","disposed","removeEventListener","CHAR_ATLAS_CELL_SPACING","_listeners","_disposed","_event","listener","arg1","arg2","queue","forwardEvent","from","to","_disposables","_isDisposed","unregister","disposeArray","disposables","getDisposeArrayDisposable","fillFallback","concat","extended","ExtendedAttrs","fromColorRGB","clone","newObj","isUnderline","isBlink","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","hasExtendedAttrs","updateExtended","getUnderlineColor","underlineColor","getUnderlineColorMode","isUnderlineColorRGB","isUnderlineColorPalette","isUnderlineColorDefault","getUnderlineStyle","underlineStyle","apply","arguments","fromCharData","obj","stringFromCodePoint","CHAR_DATA_ATTR_INDEX","combined","CHAR_DATA_CHAR_INDEX","second","CHAR_DATA_WIDTH_INDEX","DEFAULT_ATTR","CHAR_DATA_CODE_INDEX","NULL_CELL_WIDTH","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","codePoint","utf32ToString","codepoint","_interim","decode","input","target","startPos","StringToUtf32","interim","byte1","byte2","byte3","byte4","discardInterim","cp","pos","tmp","missing","fourStop","Utf8ToUtf32","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","_preserveDrawingBuffer","activate","element","renderService","_renderService","characterJoinerService","_colorManager","_renderer","onContextLoss","setRenderer","_createRenderer","textureAtlas","clearTextureAtlas","WebglAddon","define","amd"],"version":3,"file":"xterm-addon-webgl.975d0fee.js.map"}